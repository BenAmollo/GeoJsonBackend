AttributeEdit = function(Owner, Status){
Shapefile[10,3]<- Owner
Shapefile[10,4]<- Status
Atrr_Subset = convertShapeFile(Shapefile)
return(Shapefile)
}
sss = AttributeEdit("Umbwakni Malinze", "ndonyo")
sss
mapview(sss)
varname="z"
from = c("apple", "salad","orange")
to = c("fruit", "veg", "fruit")
additional="Milk"
a<-where_are_levels(mydata,varname,from, to, additional)
library(rgdal)
dsn <- system.file("vectors", package = "rgdal")
shp<-readOGR(dsn = dsn, layer = 'cities')
shp$NewAT<-1:nrow(shp)
shp
library(osrm)
library(leaflet)
library(sf)
library(plumber)
library(mapview)
library(foreign)
##load your spatial data (shapefiles) into R
Shapefile <- st_read("C:/Users/SOK/Desktop/Data_4_R_API/Sample_Shapefile_prj2.shp")
Shapefile
#Convert Shapefile to GeoJson
convertShapeFile <- function(shapeFile){
GeoJson <- geojson_json(shapeFile)
newGeoJson <- fromJSON(GeoJson)
return(newGeoJson)
}
AttributeEdit = function(Owner, Status){
Shapefile[10,3]<- Owner
Shapefile[10,4]<- Status
UpdatedShapefile = convertShapeFile(Shapefile)
return(UpdatedShapefile)
}
sss = AttributeEdit("Umbwakni Malinze", "ndonyo")
sss
class(ccc)
class(sss)
mapview(sss)
mapview(sss)
AttributeEdit = function(Owner, Status){
Shapefile[10,3]<- Owner
Shapefile[10,4]<- Status
UpdatedShapefile = convertShapeFile(Shapefile)
return(UpdatedShapefile)
}
sss = AttributeEdit("Umbwakni Malinze", "ndonyo")
sss
class(sss)
mapview(sss)
AttributeEdit = function(Owner, Status){
Shapefile[10,3]<- Owner
Shapefile[10,4]<- Status
UpdatedShapefile = convertShapeFile(Shapefile)
return(Shapefile)
}
sss = AttributeEdit("Umbwakni Malinze", "ndonyo")
sss
class(ccc)
class(sss)
AttributeEdit = function(Owner, Status){
Shapefile[10,3]<- Owner
Shapefile[10,4]<- Status
#UpdatedShapefile = convertShapeFile(Shapefile)
return(Shapefile)
}
sss = AttributeEdit("Umbwakni Malinze", "ndonyo")
sss
class(sss)
xx = which(grepl(440, Shapefile$PARCEL_NO))
xx
RowNumber = function(PARCEL_NO){
RNo <- which(grepl("PARCEL_NO", Shapefile$PARCEL_NO))
}
tt= RowNumber(440)
tt
RowNumber = function(PARCEL_NO){
RNo <- which(grepl(PARCEL_NO, Shapefile$PARCEL_NO))
}
ttt = RowNumber(440)
ttt
Shapefile
library(osrm)
library(leaflet)
library(sf)
library(plumber)
library(mapview)
library(foreign)
##load your spatial data (shapefiles) into R
Shapefile <- st_read("C:/Users/SOK/Desktop/Data_4_R_API/Sample_Shapefile_prj2.shp")
Shapefile
#Convert Shapefile to GeoJson
convertShapeFile <- function(shapeFile){
GeoJson <- geojson_json(shapeFile)
newGeoJson <- fromJSON(GeoJson)
return(newGeoJson)
}
RowNumber = function(PARCEL_NO){
RNo <- which(grepl(PARCEL_NO, Shapefile$PARCEL_NO))
}
ggg = RowNumber(507)
ggg
AttributeEdit = function(PARCEL_NO, Owner, Status){
Shapefile[RowNumber,3]<- Owner
Shapefile[RowNumber,4]<- Status
#UpdatedShapefile = convertShapeFile(Shapefile)
return(Shapefile)
}
mmm = AttributeEdit("507", "Okonkwo Mzing'", "Kanairo")
data.frame(colnames(Shapefile))
data.frame(as.integer(rownames(Shapefile)))
mmm = AttributeEdit(507, "Okonkwo Mzing'", "Kanairo")
mmm = AttributeEdit( "Okonkwo Mzing'", "Kanairo")
ggg = RowNumber(440)
ggg
Shapefile
ggg = RowNumber(541)
ggg
AttributeEdit = function(PARCEL_NO, Owner, Status){
Shapefile[RowNumber,3]<- Owner
Shapefile[RowNumber,4]<- Status
#UpdatedShapefile = convertShapeFile(Shapefile)
return(Shapefile)
}
mmm = AttributeEdit( "Okonkwo Mzing'", "Kanairo")
AttributeEdit = function(PARCEL_NO, Owner, Status){
Shapefile[(RowNumber),3]<- Owner
Shapefile[(RowNumber),4]<- Status
#UpdatedShapefile = convertShapeFile(Shapefile)
return(Shapefile)
}
mmm = AttributeEdit("541", "Okonkwo Mzing'", "Kanairo")
AttributeEdit = function(PARCEL_NO, Owner, Status){
Shapefile[RowNumber,3]<- Owner
Shapefile[RowNumber,4]<- Status
#UpdatedShapefile = convertShapeFile(Shapefile)
return(Shapefile)
}
mmm = AttributeEdit("541", "Okonkwo Mzing'", "Kanairo")
str(ggg)
ggg
AttributeEdit = function(Owner, Status){
Shapefile[RowNumber,3]<- Owner
Shapefile[RowNumber,4]<- Status
#UpdatedShapefile = convertShapeFile(Shapefile)
return(Shapefile)
}
mmm = AttributeEdit("541", "Okonkwo Mzing'", "Kanairo")
AttributeEdit = function(PARCEL_NO, Owner, Status){
RowNumber = function(PARCEL_NO){
RNo <- which(grepl(PARCEL_NO, Shapefile$PARCEL_NO))
}
Shapefile[RowNumber,3]<- Owner
Shapefile[RowNumber,4]<- Status
#UpdatedShapefile = convertShapeFile(Shapefile)
return(Shapefile)
}
mmm = AttributeEdit("541", "Okonkwo Mzing'", "Kanairo")
AttributeEdit = function(PARCEL_NO, Owner, Status){
Shapefile[RowNumber,3]<- Owner
Shapefile[RowNumber,4]<- Status
#UpdatedShapefile = convertShapeFile(Shapefile)
return(Shapefile)
}
mmm = AttributeEdit("541", "Okonkwo Mzing'", "Kanairo")
AttributeEdit = function(PARCEL_NO, Owner, Status){
Shapefile["RowNumber",3]<- Owner
Shapefile["RowNumber",4]<- Status
#UpdatedShapefile = convertShapeFile(Shapefile)
return(Shapefile)
}
mmm = AttributeEdit("541", "Okonkwo Mzing'", "Kanairo")
mmm
mmm = AttributeEdit("440", "Okonkwo Mzing'", "Kanairo")
mmm
class(mmm)
.mapview(mmm)
mapview(mmm)
mapview(mmm)
RowNumber = function(PARCEL_NO){
RNo <- which(grepl(PARCEL_NO, Shapefile$PARCEL_NO))
}
ggg = RowNumber(541)
ggg
data.frame(colnames(Shapefile))
data.frame(as.integer(rownames(Shapefile)))
xx = which(grepl(440, Shapefile$PARCEL_NO))
xx
AttributeEdit = function(PARCEL_NO, Owner, Status){
rNo. = RowNumber(PARCEL_NO)
Shapefile[rNo.,3]<- Owner
Shapefile[rNo.,4]<- Status
#UpdatedShapefile = convertShapeFile(Shapefile)
return(Shapefile)
}
mmm = AttributeEdit("541", "Okonkwo Mzing'", "Kanairo")
mmm
lll = AttributeEdit("440", "Masayoki Himuselefu'", "Sold")
lll
mapview(mmm)
mapview(lll)
mmm = AttributeEdit("507", "Barister Mwenyewe", "Sold")
mmm
lll = AttributeEdit("440", "Masayoki Himuselefu'", "Sold")
lll
class(mmm)
mapview(lll,mmm)
mapview(mmm)
mapview(lll)
plumb(file='E:/Spatial Data/R Stuff/Edit_Attribute.R')$run()
st_crs(mmm)
st_crs(Shapefile)
plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
parcels
Parcels
library(rgdal)
library(geojsonio)
library(rspatial)
library(raster)
library(ggplot2)
library(leaflet)
library(rjson)
library(jsonlite)
library(jsonify)
library(osrm)
Parcels <- st_read("E:/Spatial Data/R Stuff/R API/rdata/Data/Shp/Sample_Shapefile_prj2.shp")
Parcels
Parcels <- st_read("C:/Users/SOK/Desktop/Data_4_R_API/Sample_Shapefile_prj2.shp")
Parcels
plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
head(Shapefile)
library(osrm)
library(leaflet)
library(sf)
library(plumber)
library(mapview)
##load your spatial data (shapefiles) into R
Shapefile <- st_read("C:/Users/SOK/Desktop/Data_4_R_API/Sample_Shapefile_prj2.shp")
head(Shapefile)
plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
library(osrm)
library(leaflet)
library(sf)
library(plumber)
library(mapview)
##load your spatial data (shapefiles) into R
Shapefile <- st_read("C:/Users/SOK/Desktop/Data_4_R_API/Sample_Shapefile_prj2.shp")
head(Shapefile)
Shapefile
unique(Shapefile$PARCEL_NO)
ggg = RowNumber(999)
library(osrm)
library(leaflet)
library(sf)
library(plumber)
library(mapview)
library(foreign)
##load your spatial data (shapefiles) into R
Shapefile <- st_read("C:/Users/SOK/Desktop/Data_4_R_API/Sample_Shapefile_prj2.shp")
Shapefile
#Convert Shapefile to GeoJson
convertShapeFile <- function(shapeFile){
GeoJson <- geojson_json(shapeFile)
newGeoJson <- fromJSON(GeoJson)
return(newGeoJson)
}
RowNumber = function(PARCEL_NO){
RNo <- which(grepl(PARCEL_NO, Shapefile$PARCEL_NO))
}
ggg = RowNumber(999)
ggg
lll = AttributeEdit("999", "Akuku Danger'", "Sold")
AttributeEdit = function(PARCEL_NO, Owner, Status){
rNo. = RowNumber(PARCEL_NO)
Shapefile[rNo.,3]<- Owner
Shapefile[rNo.,4]<- Status
#UpdatedShapefile = convertShapeFile(Shapefile)
return(Shapefile)
}
lll = AttributeEdit("999", "Akuku Danger'", "Sold")
lll
mapview(lll)
plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
class(lll)
plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
library(osrm)
library(jsonlite)
ShortestDistance = function(Latitude1,Longitude1, Latitude2,Longitude2){
df = data.frame(com = c("StartPoint", "EndPoint"),
lon = c(Longitude1, Longitude2),
lat = c(Latitude1, Latitude2),
time = as.POSIXct(c("2022-01-18 23:59:59","2022-01-18 00:00:01")))
src = "StartPoint"
dst = "EndPoint"
Route <- osrmRoute(
src = src,
dst = dst,
loc = df,
overview = "full",
exclude = NULL,
returnclass="sf",
osrm.server = getOption("osrm.server"),
osrm.profile = getOption("osrm.profile")
)
RouteGeoJson <- geojson_json(Route)
RouteNewGeoJson <- fromJSON(RouteGeoJson)
return(RouteNewGeoJson)
}
Mbote_Donee = (-1.2985948211016485, 36.865356007888856, -1.290075709296072, 36.90517833723696)
Mbote_Donee
smooth_Mbote_Donee <- smooth(Mbote_Donee, method = "ksmooth")
smooth_Mbote_Donee
library(smoothr)
install.packages("smoothr")
library(osrm)
library(jsonlite)
library(smoothr)
ShortestDistance = function(Latitude1,Longitude1, Latitude2,Longitude2){
df = data.frame(com = c("StartPoint", "EndPoint"),
lon = c(Longitude1, Longitude2),
lat = c(Latitude1, Latitude2),
time = as.POSIXct(c("2022-01-18 23:59:59","2022-01-18 00:00:01")))
src = "StartPoint"
dst = "EndPoint"
Route <- osrmRoute(
src = src,
dst = dst,
loc = df,
overview = "full",
exclude = NULL,
returnclass="sf",
osrm.server = getOption("osrm.server"),
osrm.profile = getOption("osrm.profile")
)
RouteGeoJson <- geojson_json(Route)
RouteNewGeoJson <- fromJSON(RouteGeoJson)
return(RouteNewGeoJson)
}
Mbote_Donee = (-1.2985948211016485, 36.865356007888856, -1.290075709296072, 36.90517833723696)
Mbote_Donee = ("-1.2985948211016485", "36.865356007888856", "-1.290075709296072", "36.90517833723696")
Mbote_Donee = ("-1.2985948211016485","36.865356007888856","-1.290075709296072","36.90517833723696")
Mbote_Donee = ShortestDistance("-1.2985948211016485","36.865356007888856","-1.290075709296072","36.90517833723696")
Mbote_Donee
smooth_Mbote_Donee <- smooth(Mbote_Donee, method = "ksmooth")
class(Mbote_Donee)
Mbote_DoneeDF = do.call(rbind.data.frame, Mbote_Donee)
Mbote_DoneeDF = df <- data.frame(matrix(unlist(Mbote_Donee), nrow=132, byrow=TRUE),stringsAsFactors=FALSE)
class(Mbote_DoneeDF)
Mbote_DoneeDF
smooth_Mbote_Donee <- smooth(Mbote_DoneeDF, method = "ksmooth")
library(raster)
library(sf)
library(units)
library(osrm)
library(jsonlite)
library(smoothr)
library(raster)
library(sf)
library(units)
ShortestDistance = function(Latitude1,Longitude1, Latitude2,Longitude2){
df = data.frame(com = c("StartPoint", "EndPoint"),
lon = c(Longitude1, Longitude2),
lat = c(Latitude1, Latitude2),
time = as.POSIXct(c("2022-01-18 23:59:59","2022-01-18 00:00:01")))
src = "StartPoint"
dst = "EndPoint"
Route <- osrmRoute(
src = src,
dst = dst,
loc = df,
overview = "full",
exclude = NULL,
returnclass="sf",
osrm.server = getOption("osrm.server"),
osrm.profile = getOption("osrm.profile")
)
RouteGeoJson <- geojson_json(Route)
RouteNewGeoJson <- fromJSON(RouteGeoJson)
return(RouteNewGeoJson)
}
Mbote_Donee = ShortestDistance("-1.2985948211016485","36.865356007888856","-1.290075709296072","36.90517833723696")
Mbote_Donee
Mbote_DoneeDF = df <- data.frame(matrix(unlist(Mbote_Donee), nrow=132, byrow=TRUE),stringsAsFactors=FALSE)
Mbote_DoneeDF
class(Mbote_DoneeDF)
smooth_Mbote_Donee <- smooth(Mbote_DoneeDF, method = "ksmooth")
smooth_Mbote_Donee
class(Mbote_Donee)
smooth_Mbote_Donee <- smooth(Mbote_Donee, method = "ksmooth")
smooth_Mbote_Donee <- smooth(Mbote_DoneeDF, method = "ksmooth")
smooth_Mbote_Donee <- smooth(Mbote_DoneeDF, method = "chaikin")
smooth_Mbote_Donee <- smooth(Mbote_Donee, method = "chaikin")
l_smooth_ksmooth <- smooth(Mbote_DoneeDF, method = "ksmooth")
l_smooth_ksmooth <- smooth(Mbote_DoneeDF, method = "spline")
str(Mbote_Donee)
str(Mbote_DoneeDF)
l_smooth_ksmooth <- smooth(Mbote_DoneeDF, method = "spline")
library(dplyr)
Mbote_Donee = ShortestDistance("-1.2985948211016485","36.865356007888856","-1.290075709296072","36.90517833723696")
Mbote_Donee
class(Mbote_Donee)
Mbote_DoneeDF = df <- data.frame(matrix(unlist(Mbote_Donee), nrow=132, byrow=TRUE),stringsAsFactors=FALSE)
str(Mbote_DoneeDF)
l_smooth_ksmooth <- smooth(Mbote_DoneeDF, method = "spline")
Mbote_DoneeDF
class(Mbote_DoneeDF)
smooth_Mbote_Donee <- smooth(Mbote_Donee, method = "chaikin")
l_smooth_ksmooth <- smooth(Mbote_DoneeDF, method = "spline")
l_smooth_ksmooth <- smooth(Mbote_DoneeDF, "spline")
method =
l_smooth_ksmooth <- smooth(Mbote_DoneeDF, method = "spline")
plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
l_smooth_ksmooth <- smooth(Mbote_DoneeDF, method = "spline")
library(osrm)
library(jsonlite)
library(smoothr)
library(raster)
library(sf)
library(units)
library(dplyr)
ShortestDistance = function(Latitude1,Longitude1, Latitude2,Longitude2){
df = data.frame(com = c("StartPoint", "EndPoint"),
lon = c(Longitude1, Longitude2),
lat = c(Latitude1, Latitude2),
time = as.POSIXct(c("2022-01-18 23:59:59","2022-01-18 00:00:01")))
src = "StartPoint"
dst = "EndPoint"
Route <- osrmRoute(
src = src,
dst = dst,
loc = df,
overview = "full",
exclude = NULL,
returnclass="sf",
osrm.server = getOption("osrm.server"),
osrm.profile = getOption("osrm.profile")
)
RouteGeoJson <- geojson_json(Route)
RouteNewGeoJson <- fromJSON(RouteGeoJson)
return(RouteNewGeoJson)
}
Mbote_Donee = ShortestDistance("-1.2985948211016485","36.865356007888856","-1.290075709296072","36.90517833723696")
Mbote_Donee
class(Mbote_Donee)
Mbote_DoneeDF = df <- data.frame(matrix(unlist(Mbote_Donee), nrow=132, byrow=TRUE),stringsAsFactors=FALSE)
str(Mbote_DoneeDF)
l_smooth_ksmooth <- smooth(Mbote_DoneeDF, method = "spline")
line <- st_read("C:/Users/SOK/Desktop/Fina Data/tryz.shp")
smooth_line <- smooth(line, method = "chaikin")
mapview(smooth_line)
mapview(line)
mapview(smooth_line)
Mbote_Donee
class(Mbote_Donee)
coordinates(Mbote_Donee)=~long+lat
coordinates(Mbote_DoneeDF)=~long+lat
coordinates(Mbote_DoneeDF)=~lon+lat
# write a shapefile
writeOGR(Mbote_DoneeDF, getwd(),
"MboteeDonee", driver="ESRI Shapefile")
# write a shapefile
writeOGR(Mbote_DoneeDF,"MboteeDonee.shp", driver="ESRI Shapefile")
Shortest_Route_shp <- readOGR(layer = "Shortest Route.shp", verbose = FALSE)
st_write(Mbote_DoneeDF, "Shortest Route555.shp")
st_write(Mbote_DoneeDF, "Mbotee.shp")
MbotteeSmoot = smooth(Mbotee, method = "spline")
Mbotee2smooth = st_read(Mbotee)
Mbotee = st_write(Mbote_DoneeDF, "Mbotee.shp")
Mbotee2smooth = st_read(Mbotee)
.MbotteeSmoot = smooth(Mbotee, method = "spline")
MbotteeSmoot = smooth(Mbotee, method = "spline")
Mbotee = st_write(Mbote_DoneeDF, dsn = "C:/Users/SOK/Desktop/Fina Data" "Mbotee.shp")
Mbotee = st_write(Mbote_DoneeDF, dsn "Mbotele.shp")
Mbotee = st_write(Mbote_DoneeDF, "Mbotele.shp")
Mbotee2smooth = st_read(Mbotee)
Mbotee2smooth = sf::st_read(Mbotee)
Mbotee = st_write(Mbote_DoneeDF, "Mbostele.shp")
Mbotee2smooth = sf::st_read(Mbotee)
Mbote_Donee = ShortestDistance("-1.2985948211016485","36.865356007888856","-1.290075709296072","36.90517833723696")
Mbote_Donee
class(Mbote_Donee)
str(Mbote_Donee)
plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
js = st_read("C:/Users/SOK/Desktop/Fina Data/jsonformatter.json")
js = st_read("C:/Users/SOK/Desktop/Fina Data/jsonformatter.json")
line <- st_read("C:/Users/SOK/Desktop/Fina Data/js/POLYLINE.shp")
line <- st_read("C:/Users/SOK/Desktop/Fina Data/tryz.shp")
smooth_line <- smooth(line, method = "chaikin")
mapview(smooth_line)
smooth_line <- smooth(line, method = "spline")
mapview(smooth_line)
Mbote_Donee
class(Mbote_Donee)
str(Mbote_Donee)
plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
smooth_line <- smooth(Mbote_Donee, method = "spline")
smooth_line <- smooth(line, method = "spline")
mapview(smooth_line)
mapview(line)
mapview(smooth_line)
plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
