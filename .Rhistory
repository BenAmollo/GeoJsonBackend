wardFacilities = function(shapeFile, wardName, wardShapeFile){
transFormedShapeFile = st_crs(shapeFile) <- 32737
wardData = wardData(wardShapeFile, wardName)
wardFacility_sf = Set_as_sf(wardData)
wardFacility = st_intersection(transFormedShapeFile, wardFacility_sf)
return(wardFacility)
}
x = wardFacilities(Schools, "Makongeni Ward", Wards)
vert it to 'sf'
Set_as_sf = function(Data){
Data_sf = st_as_sf(Data)
return(Data_sf)
}
#Get a specific ward details by Name
wardData = function(shapeFile, wardName){
data = subset(shapeFile, ward==wardName)
transFormedData = Transform(data)
WardDataJS = Ward_convertShapeFile(transFormedData)
WardDataJSdf = data.frame(t(sapply(WardDataJS,c)))
#data.frame(t(sapply(mylistlist,c)))
return(WardDataJSdf)
}
#Get Features within  a specific ward
wardFacilities = function(shapeFile, wardName, wardShapeFile){
transFormedShapeFile = st_crs(shapeFile) <- 32737
wardData = wardData(wardShapeFile, wardName)
wardFacility_sf = Set_as_sf(wardData)
wardFacility = st_intersection(transFormedShapeFile, wardFacility_sf)
return(wardFacility)
}
x = wardFacilities(Schools, "Makongeni Ward", Wards)
x
x = wardFacilities(Schools, "Makongeni Ward", Wards)
plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
#Convert Ward Shapefile to GeoJson
Ward_convertShapeFile <- function(Wards){
Ward_GeoJson <- geojson_json(Wards)
Ward_newGeoJson <- fromJSON(Ward_GeoJson)
return(Ward_newGeoJson)
}
## convert it to 'sf'
Set_as_sf = function(Data){
Data_sf = st_as_sf(Data)
return(Data_sf)
}
#Get a specific ward details by Name
wardData = function(shapeFile, wardName){
data = subset(shapeFile, ward==wardName)
transFormedData = Transform(data)
WardDataJS = Ward_convertShapeFile(transFormedData)
WardDataJSdf = data.frame(t(sapply(WardDataJS,c)))
WardDataJSdf_sf = Set_as_sf(WardDataJSdf)
return(WardDataJSdf_sf)
}
#Get Features within  a specific ward
wardFacilities = function(shapeFile, wardName, wardShapeFile){
transFormedShapeFile = st_crs(shapeFile) <- 32737
wardData = wardData(wardShapeFile, wardName)
wardFacility_sf = Set_as_sf(wardData)
wardFacility = st_intersection(transFormedShapeFile, wardData)
return(wardFacility)
}
x = wardFacilities(Schools, "Makongeni Ward", Wards)
#Import Shapefiles to R
Roads <- st_read("E:/Spatial Data/Vector data/Kenya_Data/hotosm_ken_roads_lines.shp,", stringAsFactors = FALSE)
Schools <- st_read("E:/Spatial Data/Vector data/Kenya_Data/Schools.shp", stringAsFactors = FALSE)
Schools <- st_read("E:/Spatial Data/Vector data/Kenya_Data/Schools.shp")
#Import Shapefiles to R
Roads <- st_read("E:/Spatial Data/Vector data/Kenya_Data/hotosm_ken_roads_lines.shp", stringAsFactors = FALSE)
Schools <- st_read("E:/Spatial Data/Vector data/Kenya_Data/Schools.shp", stringAsFactors = FALSE)
#Import Shapefiles to R
Roads <- st_read("E:/Spatial Data/Vector data/Kenya_Data/hotosm_ken_roads_lines.shp")
plot(st_geometry(East_Kwa_Mabeast))
library(tmap)
library(tmaptools)
library(rgdal)
library(sf)
library(raster)
library(OpenStreetMap)
library(rgeos)
library(raster)
library(sp)
library(leaflet)
library(tidyverse)
library(plyr)
#Import Shapefiles to R
Roads <- st_read("E:/Spatial Data/Vector data/Kenya_Data/hotosm_ken_roads_lines.shp", package = 'sf') %>% st_transform(4269)
Schools <- st_read("E:/Spatial Data/Vector data/Kenya_Data/Schools.shp", package = 'sf') %>% st_transform(4269)
Schools_js <- st_read("E:/Spatial Data/Vector data/Kenya_Data/School.json", package = 'sf') %>% st_transform(4269)
Health_Facilities <- st_read("E:/Spatial Data/Vector data/Kenya_Data/kenya_health_facilities.shp", package = 'sf') %>% st_transform(4269)
East_Kwa_Mabeast <- st_read("E:/Spatial Data/Vector data/Kenya_Data/East_Kwa_Mabeast.shp", package = 'sf') %>% st_transform(4269)
Wards <- st_read("E:/Spatial Data/Vector data/Kenya_Data/Kenya_Wards/Kenya_wards.shp", package = 'sf') %>% st_transform(4269)
#Import Shapefiles to R
Roads <- st_read("E:/Spatial Data/Vector data/Kenya_Data/hotosm_ken_roads_lines.shp")
Schools <- st_read("E:/Spatial Data/Vector data/Kenya_Data/Schools.shp")
Schools_js <- st_read("E:/Spatial Data/Vector data/Kenya_Data/School.json")
Health_Facilities <- st_read("E:/Spatial Data/Vector data/Kenya_Data/kenya_health_facilities.shp")
East_Kwa_Mabeast <- st_read("E:/Spatial Data/Vector data/Kenya_Data/East_Kwa_Mabeast.shp")
Wards <- st_read("E:/Spatial Data/Vector data/Kenya_Data/Kenya_Wards/Kenya_wards.shp")
#Transform function something
Transform = function(Layer2Transform, crs){
Transformed <- st_transform(Layer2Transform, crs=(crs = 4326))
return(Transformed)
}
#Return all columns in a shapefile
shapeFile_columns = function(shapeFile){
return(names(shapeFile))
}
#Convert Ward Shapefile to GeoJson
Ward_convertShapeFile <- function(Wards){
Ward_GeoJson <- geojson_json(Wards)
Ward_newGeoJson <- fromJSON(Ward_GeoJson)
return(Ward_newGeoJson)
}
## convert it to 'sf'
Set_as_sf = function(Data){
Data_sf = st_as_sf(Data)
return(Data_sf)
}
#Get a specific ward details by Name
wardData = function(shapeFile, wardName){
data = subset(shapeFile, ward==wardName)
transFormedData = Transform(data)
WardDataJS = Ward_convertShapeFile(transFormedData)
WardDataJSdf = data.frame(t(sapply(WardDataJS,c)))
WardDataJSdf_sf = Set_as_sf(WardDataJSdf)
return(WardDataJSdf_sf)
}
#Get Features within  a specific ward
wardFacilities = function(shapeFile, wardName, wardShapeFile){
transFormedShapeFile = st_crs(shapeFile) <- 32737
wardData = wardData(wardShapeFile, wardName)
wardFacility_sf = Set_as_sf(wardData)
wardFacility = st_intersection(transFormedShapeFile, wardData)
return(wardFacility)
}
x = wardFacilities(Schools, "Makongeni Ward", Wards)
plot(st_geometry$(Schools))
plot(st_geometry$Schools)
plot(st_geometry(Schools))
tt = wardData(Wards,"Makongeni Ward")
#Convert Ward Shapefile to GeoJson
Ward_convertShapeFile <- function(Wards){
Ward_GeoJson <- geojson_json(Wards)
Ward_newGeoJson <- fromJSON(Ward_GeoJson)
return(Ward_newGeoJson)
}
## convert it to 'sf'
Set_as_sf = function(Data){
Data_sf = st_as_sf(Data)
return(Data_sf)
}
#Get a specific ward details by Name
wardData = function(shapeFile, wardName){
data = subset(shapeFile, ward==wardName)
transFormedData = Transform(data)
WardDataJS = Ward_convertShapeFile(transFormedData)
WardDataJSdf = data.frame(t(sapply(WardDataJS,c)))
WardDataJSdf_sf = Set_as_sf(WardDataJSdf)
return(WardDataJSdf_sf)
}
tt = wardData(Wards,"Makongeni Ward")
Okongo = subset(Wards, ward=="Makongeni Ward")
plot(st_geometry(Okongo))
wardSubset = function(Subset, Shapefile, wardName){
Subset = subset(Shapefile,wardName)
return(Subset)
}
yy = wardSubset(Wards, "Makongeni Ward")
wardSubset = function(Shapefile, wardName){
Subset = subset(Shapefile,wardName)
return(Subset)
}
yy = wardSubset(Wards, "Makongeni Ward")
wardSubset = function(Shapefile, wardName){
Subset = subset(Shapefile,wardName == ward)
return(Subset)
}
yy = wardSubset(Wards, "Makongeni Ward")
yy
#Clip something
clipping = function(toClip, clipLayer){
clipped = st_intersection(toClip, st_union(clipLayer))
return(clipped)
}
OkongoSch <- clipping(Schools, wardSubset)
wardSubset = function(Shapefile, wardName){
Subset = subset(Shapefile,wardName == ward)
return(Subset)
}
Okongo = wardSubset(Wards, "Makongeni Ward")
#Clip something
clipping = function(toClip, clipLayer, wardSubset){
clipped = st_intersection(toClip, st_union(wardSubset))
return(clipped)
}
OkongoSch <- clipping(Schools, Okongo)
#Clip something
clipping = function(toClip, clipLayer){
clipped = st_intersection(toClip, st_union(clipLayer))
return(clipped)
}
OkongoSch <- clipping(Schools, Okongo)
wardSubset = function(Shapefile, wardName){
Subset = subset(Shapefile,wardName == ward)
return(Subset)
}
Okongo = wardSubset(Wards, "Makongeni Ward")
#Clip something
clipping = function(toClip, clipLayer){
clipped = st_intersection(toClip, st_union(Subset))
return(clipped)
}
OkongoSch <- clipping(Schools, Okongo)
#Clip something
clipping = function(toClip, clipLayer, Subset){
Subset = subset(Shapefile,wardName == ward)
clipped = st_intersection(toClip, st_union(Subset))
return(clipped)
}
OkongoSch <- clipping(Schools, Subset)
#Clip something
clipping = function(toClip, clipLayer){
clipLayer = wardSubset(Shapefile, wardName)
clipped = st_intersection(toClip, st_union(clipLayer))
return(clipped)
}
OkongoSch <- clipping(Schools, ward)
#Clip something
clipping = function(toClip, clipLayer){
clipLayer = wardSubset(Wards, wardName)
clipped = st_intersection(toClip, st_union(clipLayer))
return(clipped)
}
OkongoSch <- clipping(Schools, ward)
#Clip something
clipping = function(toClip, clipLayer){
clipLayer = wardSubset(Wards, wardName == ward)
clipped = st_intersection(toClip, st_union(clipLayer))
return(clipped)
}
OkongoSch <- clipping(Schools, ward)
clipLayer = wardSubset(Wards, ward)
#Clip something
clipping = function(toClip, clipLayer){
clipLayer = wardSubset(Wards, ward)
clipped = st_intersection(toClip, st_union(clipLayer))
return(clipped)
}
OkongoSch <- clipping(Schools, ward)
#Clip something
clipping = function(toClip, clipLayer){
clipLayer = wardSubset(Wards, wardSubset)
clipped = st_intersection(toClip, st_union(clipLayer))
return(clipped)
}
OkongoSch <- clipping(Schools, "Makongeni Ward")
Okongo = wardSubset(Wards, "Makongeni Ward")
OkongoSch <- clipping(Schools, Okongo)
#Clip something
clipping = function(toClip, clipLayer){
clipped = st_intersection(toClip, st_union(clipLayer))
return(clipped)
}
OkongoSch <- clipping(Schools, Okongo)
Okongo_Health_Facilities <- st_intersection(Health_Facilities, st_union(Okongo))
Okongo_Health_Facilities
plot(st_geometry(Okongo_Health_Facilities))
wardSubset = function(Shapefile, wardName){
Subset = subset(Shapefile,wardName == ward)
return(Subset)
}
Okongo = wardSubset(Wards, "Makongeni Ward")
#Clip something
clipping = function(toClip, clipLayer){
clipLayer = wardSubset(Wards, wardName == ward)
clipped = st_intersection(toClip, st_union(Subset2Clip))
return(clipped)
}
OkongoSch = clipping(Schools, "Makongeni Ward")
#Clip something
clipping = function(toClip, clipLayer){
clipLayer = wardSubset(Wards, ward)
clipped = st_intersection(toClip, st_union(Subset2Clip))
return(clipped)
}
OkongoSch = clipping(Schools, "Makongeni Ward")
#Clip something
clipping = function(toClip, clipLayer){
clipLayer = wardSubset(Wards, ward)
clipped = st_intersection(toClip, st_union(clipLayer))
return(clipped)
}
OkongoSch = clipping(Schools, "Makongeni Ward")
ward = wardSubset(Wards,ward)
#Clip something
clipping = function(toClip, wardSubset){
clipped = st_intersection(toClip, st_union(wardSubset))
return(clipped)
}
OkongoSch = clipping(Schools, "Makongeni Ward")
plumber::plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
#
# This is a Plumber API. You can run the API by clicking
# the 'Run API' button above.
#
# Find out more about building APIs with Plumber here:
#
#    https://www.rplumber.io/
#
library(plumber)
library(sf)
library(rgdal)
library(geojsonio)
library(rspatial)
library(raster)
library(ggplot2)
library(leaflet)
library("rjson")
library(jsonlite)
#* @apiTitle Plumber Example API
#*
#*
Parcels <- st_read("E:/Spatial Data/R Stuff/R API/rdata/Data/Shp/Sample_Shapefile_prj2.shp")
Schools <- st_read("E:/Spatial Data/Vector data/Kenya_Data/Schools.shp")
Health_Facilities <- st_read("E:/Spatial Data/Vector data/Kenya_Data/kenya_health_facilities.shp")
Wards <- st_read("E:/Spatial Data/Vector data/Kenya_Data/Kenya_Wards/kenya_wards.shp")
#Get a specific ward details by Name
wardData = function(shapeFile, wardName){
data = subset(shapeFile, ward==wardName)
transFormedData = Transform(data)
WardDataJS = Ward_convertShapeFile(transFormedData)
WardDataJSdf = data.frame(t(sapply(WardDataJS,c)))
WardDataJSdf_sf = Set_as_sf(WardDataJSdf)
return(WardDataJSdf_sf)
}
wardSubset = function(Shapefile, wardName){
Subset = subset(Shapefile,wardName == ward)
return(Subset)
}
Okongo = wardSubset(Wards, "Makongeni Ward")
#* Get Geojson for Schools
#* @param valueType The type of search you want e.g [NAME,LEVEL, STATUS,COUNTY,ZONE, SUB_COUNTY, WARD]
#* @param uniqueValue The parameter in question e.g. ['St Michaels','Primary', 'Busia', 'Makadara', 'Makadara', Hamza]
#* @serializer unboxedJSON
#* @get /get-schools-geojson/
function(valueType, uniqueValue) {
School = schoolValues(valueType, uniqueValue)
return(School)
}
#Return all the specific values under a given School
schoolValues = function(valueType, uniqueValue){
if(valueType == "NAME"){
data = subset(Schools, SCHOOL_NAM==uniqueValue)
}else if(valueType == "LEVEL"){
data = subset(Schools, LEVEL==uniqueValue)
}else if(valueType == "STATUS"){
data = subset(Schools, Status==uniqueValue)
}else if(valueType == "COUNTY"){
data = subset(Schools, County==uniqueValue)
}else if(valueType == "ZONE"){
data = subset(Schools, ZONE==uniqueValue)
}else if(valueType == "SUB_COUNTy"){
data = subset(Schools, SUB_COUNTy==uniqueValue)
}else if(valueType == "WARD"){
data = subset(Schools, Ward==uniqueValue)
}else{
data = subset(Schools, Status=="Public")
}
return(data)
}
library(tmap)
library(tmaptools)
library(rgdal)
library(sf)
library(raster)
library(OpenStreetMap)
library(rgeos)
library(raster)
library(sp)
library(leaflet)
library(tidyverse)
library(plyr)
#Import Shapefiles to R
Roads <- st_read("E:/Spatial Data/Vector data/Kenya_Data/hotosm_ken_roads_lines.shp")
Schools <- st_read("E:/Spatial Data/Vector data/Kenya_Data/Schools.shp")
Schools_js <- st_read("E:/Spatial Data/Vector data/Kenya_Data/School.json")
Health_Facilities <- st_read("E:/Spatial Data/Vector data/Kenya_Data/kenya_health_facilities.shp")
East_Kwa_Mabeast <- st_read("E:/Spatial Data/Vector data/Kenya_Data/East_Kwa_Mabeast.shp")
Wards <- st_read("E:/Spatial Data/Vector data/Kenya_Data/Kenya_Wards/Kenya_wards.shp")
#Transform function something
Transform2 = function(Layer2Transform, crs){
Transformed2 <- st_transform(Layer2Transform, crs=(crs = 32737))
return(Transformed2)
}
#Subset Wards Data
WardSubset = function(Shapeflie, Name){
Ward = subset(Wards, ward == Name)
return(Ward)
}
WardFacility = function(Facilities, WardSubset){
WardTransformed = Transform2(WardSubset, crs)
Facilities =  st_intersection(Health_Facilities, WardSubset)
return(Facilities)
}
bbb = WardFacility(Health_Facilities, "Makongeni Ward")
WardFacility = function(Facilities, WardSubset){
WardTransformed = Transform2(WardSubset, crs)
Facilities =  st_intersection(Health_Facilities, WardTransformed)
return(Facilities)
}
bbb = WardFacility(Health_Facilities, "Makongeni Ward")
#Subset Wards Data
WardSubset = function(Shapeflie, Name){
transFormedData = Transform(Wards)
WardDataJS = convertShapeFile(transFormedData)
WardDataJSdf = data.frame(t(sapply(WardDataJS,c)))
Ward = subset(WardDataJSdf, ward == Name)
return(Ward)
}
WardFacility = function(Facilities, WardSubset){
WardTransformed = Transform2(WardSubset, crs)
Facilities =  st_intersection(Health_Facilities, WardTransformed)
return(Facilities)
}
bbb = WardFacility(Health_Facilities, "Makongeni Ward")
#Transform function something
Transform2 = function(Layer2Transform, crs){
Transformed2 <- st_transform(Layer2Transform, crs=(crs = 32737))
return(Transformed2)
}
#Subset Wards Data
WardSubset = function(Shapeflie, Name){
# transFormedData = Transform(Wards)
WardDataJS = convertShapeFile(transFormedData)
WardDataJSdf = data.frame(t(sapply(WardDataJS,c)))
Ward = subset(WardDataJSdf, ward == Name)
return(Ward)
}
WardFacility = function(Facilities, WardSubset){
WardFacilitydf = data.frame(t(sapply(WardSubset,c)))
WardFacilityTransformed = Transform2(WardSubset, crs)
Facilities =  st_intersection(Health_Facilities, WardFacilityTransformed)
return(Facilities)
}
bbb = WardFacility(Health_Facilities, "Makongeni Ward")
library(tidyr)
#Transform function something
Transform2 = function(Layer2Transform, crs){
Transformed2 <- st_transform(Layer2Transform, crs=(crs = 32737))
return(Transformed2)
}
#Subset Wards Data
WardSubset = function(Shapeflie, Name){
# transFormedData = Transform(Wards)
WardDataJS = convertShapeFile(transFormedData)
WardDataJSdf = data.frame(t(sapply(WardDataJS,c)))
Ward = subset(WardDataJSdf, ward == Name)
return(Ward)
}
WardFacility = function(Facilities, WardSubset){
WardFacilitydf = data.frame(t(sapply(WardSubset,c)))
WardFacilityTransformed = Transform2(WardSubset, crs)
Facilities =  st_intersection(Health_Facilities, WardFacilityTransformed)
return(Facilities)
}
bbb = WardFacility(Health_Facilities, "Makongeni Ward")
makongeni = wardSubset(Wards, "Makongeni Ward")
makongeni
plot(st_geometry$(makongeni))
plot(st_geometry(makongeni))
st_is_valid(Schools)
st_is_valid(Health_Facilities)
st_is_valid(Wards)
WardFacility = function(Facilities, Ward){
WardFacilitydf = data.frame(t(sapply(WardSubset,c)))
WardFacilityTransformed = Transform2(WardSubset, crs)
Facilities =  st_intersection(Health_Facilities, WardFacilityTransformed)
return(Facilities)
}
bbb = WardFacility(Health_Facilities, "Makongeni Ward")
WardFacility = function(Facilities, WardSubset){
WardSubset = WardSubset(Transformed2, wardName)
WardFacilitydf = data.frame(t(sapply(WardSubset,c)))
WardFacilityTransformed = Transform2(WardSubset, crs)
Facilities =  st_intersection(Health_Facilities, WardFacilityTransformed)
return(Facilities)
}
bbb = WardFacility(Health_Facilities, "Makongeni Ward")
WardFacility = function(Facilities, WardSubset){
WardSubset = WardSubset(Transformed2, wardName)
WardFacilitydf = data.frame(t(sapply(WardSubset,c)))
WardFacilityTransformed = Transform2(WardSubset, crs)
Facilities =  st_intersection(Health_Facilities, WardFacilityTransformed)
return(Facilities)
}
bbb = WardFacility(Health_Facilities, "Makongeni Ward")
#Convert Shapefile to GeoJson
convertShapeFile <- function(shapeFile){
GeoJson <- geojson_json(shapeFile)
newGeoJson <- fromJSON(GeoJson)
return(newGeoJson)
}
WardFacility = function(Facilities, WardSubset){
WardSubset = WardSubset(Transformed2, wardName)
WardFacilitydf = data.frame(t(sapply(WardSubset,c)))
WardFacilityTransformed = Transform2(WardSubset, crs)
Facilities =  st_intersection(Health_Facilities, WardFacilityTransformed)
return(Facilities)
}
bbb = WardFacility(Health_Facilities, "Makongeni Ward")
plumber::plumb(file='C:/Users/SOK/Desktop/R_API/test_api/geojson_backend.R')$run()
